datasource db {
  provider         =  "postgresql"
 url               = env("DATABASE_URL")
 directUrl         = env("DIRECT_URL")
 relationMode      = "prisma"
}

generator client {
 provider = "prisma-client-js"
}

enum Role {
 ADMIN
 USER
 GUEST
}

enum ProjectStatus {
 NOT_DEPLOYED
 DEPLOYING
 DEPLOYED
 FAILED
}

model User {
 id            String         @id @default(uuid())
 name          String
 email         String         @unique
 role          Role          @default(USER)
 createdAt     DateTime      @default(now())
 updatedAt     DateTime      @updatedAt
 
 // Relationships
 clients       Client[]      // Clients created by this user
 clientUsers   ClientUser[]  // Clients this user has access to
}

model Client {
 id            String         @id @default(uuid())
 companyName   String
 companyLogo   String?        @db.Text
 companyEmail  String         @unique
 companyPhone  String?
 address       String?
 city          String?
 state         String?
 country       String?
 createdAt     DateTime      @default(now())
 updatedAt     DateTime      @updatedAt
 
 // Creator relationship
 createdBy     User          @relation(fields: [createdById], references: [id])
 createdById   String
 
 // Relationships
 projects      Project[]
 clientUsers   ClientUser[]
  @@index([createdById])
}

model Project {
 id                    String        @id @default(uuid())
 name                  String
 description           String?
 createdAt            DateTime      @default(now())
 updatedAt            DateTime      @updatedAt
 
 // Builder.io integration
 builderSpaceId     String?       // Space ID for reference
 builderPublicKey   String?       // Public API key for client-side access
 
 // GitHub integration
 repositoryUrl        String?
 
 // Deployment
 deploymentUrl        String?
 status              ProjectStatus  @default(NOT_DEPLOYED)
 
 // Relationships
 client              Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
 clientId            String
 @@index([clientId])
}

model ClientUser {
 id        String   @id @default(uuid())
 client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
 clientId  String
 user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 userId    String
 role      Role     @default(GUEST)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
  @@unique([clientId, userId])
 @@index([clientId])
 @@index([userId])
}